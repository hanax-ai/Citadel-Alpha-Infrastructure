#!/bin/bash

echo "üß™ Validating HX-Server-02 Monitoring Configuration"
echo "=================================================="

# Check configuration files
echo "üìã Checking configuration files..."

if [ -f "/opt/citadel-02/config/services/monitoring/prometheus.yaml" ]; then
    echo "‚úÖ Prometheus configuration exists"
    # Validate YAML syntax
    if python3 -c "import yaml; yaml.safe_load(open('/opt/citadel-02/config/services/monitoring/prometheus.yaml'))" 2>/dev/null; then
        echo "‚úÖ Prometheus YAML syntax is valid"
    else
        echo "‚ùå Prometheus YAML syntax error"
    fi
else
    echo "‚ùå Prometheus configuration missing"
fi

if [ -f "/opt/citadel-02/config/services/monitoring/grafana.yaml" ]; then
    echo "‚úÖ Grafana configuration exists"
    if python3 -c "import yaml; yaml.safe_load(open('/opt/citadel-02/config/services/monitoring/grafana.yaml'))" 2>/dev/null; then
        echo "‚úÖ Grafana YAML syntax is valid"
    else
        echo "‚ùå Grafana YAML syntax error"
    fi
else
    echo "‚ùå Grafana configuration missing"
fi

if [ -f "/opt/citadel-02/config/services/monitoring/alerting.yaml" ]; then
    echo "‚úÖ Alerting configuration exists"
    if python3 -c "import yaml; yaml.safe_load(open('/opt/citadel-02/config/services/monitoring/alerting.yaml'))" 2>/dev/null; then
        echo "‚úÖ Alerting YAML syntax is valid"
    else
        echo "‚ùå Alerting YAML syntax error"
    fi
else
    echo "‚ùå Alerting configuration missing"
fi

# Check dashboard directories
echo ""
echo "üìÅ Checking dashboard directories..."

if [ -d "/opt/citadel-02/frameworks/monitoring/dashboards" ]; then
    echo "‚úÖ Main dashboards directory exists"
else
    echo "‚ùå Main dashboards directory missing"
fi

if [ -d "/opt/citadel-02/frameworks/monitoring/local-dashboards" ]; then
    echo "‚úÖ Local dashboards directory exists"
    dashboard_count=$(find /opt/citadel-02/frameworks/monitoring/local-dashboards -name "*.json" | wc -l)
    echo "üìä Found ${dashboard_count} dashboard file(s)"
else
    echo "‚ùå Local dashboards directory missing"
fi

if [ -d "/opt/citadel-02/config/services/monitoring/rules" ]; then
    echo "‚úÖ Alert rules directory exists"
else
    echo "‚ùå Alert rules directory missing"
fi

# Check service endpoints for metrics
echo ""
echo "üîç Testing local metrics endpoints..."

echo "Testing Citadel Gateway metrics (localhost:8001/metrics)..."
if curl -s -f http://localhost:8001/metrics > /dev/null 2>&1; then
    echo "‚úÖ Citadel Gateway metrics endpoint accessible"
else
    echo "‚ö†Ô∏è  Citadel Gateway metrics endpoint not accessible (service may be down)"
fi

echo "Testing Ollama metrics (localhost:11434/metrics)..."
if curl -s -f http://localhost:11434/metrics > /dev/null 2>&1; then
    echo "‚úÖ Ollama metrics endpoint accessible"
else
    echo "‚ö†Ô∏è  Ollama metrics endpoint not accessible (service may be down)"
fi

echo "Testing Node Exporter (localhost:9100/metrics)..."
if curl -s -f http://localhost:9100/metrics > /dev/null 2>&1; then
    echo "‚úÖ Node Exporter metrics endpoint accessible"
else
    echo "‚ö†Ô∏è  Node Exporter not accessible (may need installation)"
fi

# Test central metrics server connectivity
echo ""
echo "üåê Testing central metrics server connectivity..."

echo "Testing central Prometheus (192.168.10.37:9090)..."
if curl -s -f http://192.168.10.37:9090/api/v1/status/config > /dev/null 2>&1; then
    echo "‚úÖ Central Prometheus accessible"
else
    echo "‚ö†Ô∏è  Central Prometheus not accessible"
fi

echo "Testing central Grafana (192.168.10.37:3000)..."
if curl -s -f http://192.168.10.37:3000/api/health > /dev/null 2>&1; then
    echo "‚úÖ Central Grafana accessible"
else
    echo "‚ö†Ô∏è  Central Grafana not accessible"
fi

echo "Testing central Alertmanager (192.168.10.37:9093)..."
if curl -s -f http://192.168.10.37:9093/api/v1/status > /dev/null 2>&1; then
    echo "‚úÖ Central Alertmanager accessible"
else
    echo "‚ö†Ô∏è  Central Alertmanager not accessible"
fi

echo ""
echo "üìñ Configuration Summary:"
echo "  ‚Ä¢ Prometheus config: /opt/citadel-02/config/services/monitoring/prometheus.yaml"
echo "  ‚Ä¢ Grafana config: /opt/citadel-02/config/services/monitoring/grafana.yaml"
echo "  ‚Ä¢ Alerting config: /opt/citadel-02/config/services/monitoring/alerting.yaml"
echo "  ‚Ä¢ Dashboards: /opt/citadel-02/frameworks/monitoring/dashboards/"
echo "  ‚Ä¢ Local dashboards: /opt/citadel-02/frameworks/monitoring/local-dashboards/"
echo ""
echo "üéØ Next Steps:"
echo "  1. Ensure Node Exporter is installed: sudo apt install prometheus-node-exporter"
echo "  2. Configure central metrics server to scrape HX-Server-02 endpoints"
echo "  3. Import dashboard JSON files to Grafana"
echo "  4. Test alert routing to central Alertmanager"
