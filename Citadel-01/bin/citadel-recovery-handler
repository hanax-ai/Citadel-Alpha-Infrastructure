#!/bin/bash

# Citadel Gateway Recovery Handler
# Triggered when citadel-gateway.service fails
# Performs diagnostic checks and automated recovery procedures

set -euo pipefail

# Configuration
CITADEL_HOME="/opt/citadel"
LOG_DIR="$CITADEL_HOME/logs/api-gateway"
RECOVERY_LOG="$LOG_DIR/recovery.log"
MAX_RECOVERY_ATTEMPTS=3
RECOVERY_STATE_FILE="$CITADEL_HOME/var/state/recovery-state"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Logging function
log() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "[$timestamp] $1" | tee -a "$RECOVERY_LOG"
}

error() {
    log "${RED}[ERROR]${NC} $1"
}

warning() {
    log "${YELLOW}[WARNING]${NC} $1"
}

success() {
    log "${GREEN}[SUCCESS]${NC} $1"
}

info() {
    log "${BLUE}[INFO]${NC} $1"
}

# Create necessary directories
mkdir -p "$LOG_DIR" "$(dirname "$RECOVERY_STATE_FILE")"

# Initialize recovery state
if [[ ! -f "$RECOVERY_STATE_FILE" ]]; then
    echo "0" > "$RECOVERY_STATE_FILE"
fi

# Read current recovery attempt count
RECOVERY_ATTEMPTS=$(cat "$RECOVERY_STATE_FILE")
RECOVERY_ATTEMPTS=$((RECOVERY_ATTEMPTS + 1))

log "=== Citadel Gateway Recovery Handler Started ==="
log "Recovery attempt: $RECOVERY_ATTEMPTS / $MAX_RECOVERY_ATTEMPTS"

# Check if we've exceeded max recovery attempts
if [[ $RECOVERY_ATTEMPTS -gt $MAX_RECOVERY_ATTEMPTS ]]; then
    error "Maximum recovery attempts ($MAX_RECOVERY_ATTEMPTS) exceeded"
    log "Escalating to manual intervention required"
    
    # Send alert to external monitoring
    if command -v curl >/dev/null; then
        curl -s -X POST http://localhost:8000/webhooks/alerts \
            -H "Content-Type: application/json" \
            -d '{
                "alerts": [{
                    "status": "firing",
                    "labels": {
                        "alertname": "CitadelRecoveryFailed",
                        "severity": "critical",
                        "service": "citadel-gateway",
                        "cluster": "hx-server-02"
                    },
                    "annotations": {
                        "summary": "Citadel Gateway recovery exceeded maximum attempts",
                        "description": "Automatic recovery failed after '"$MAX_RECOVERY_ATTEMPTS"' attempts. Manual intervention required."
                    }
                }]
            }' >/dev/null 2>&1 || true
    fi
    
    exit 1
fi

# Update recovery attempt count
echo "$RECOVERY_ATTEMPTS" > "$RECOVERY_STATE_FILE"

# Function to check service dependencies
check_dependencies() {
    info "Checking service dependencies..."
    
    local deps_healthy=true
    
    # Check Redis
    if systemctl is-active --quiet redis-server.service; then
        success "Redis service is active"
    else
        warning "Redis service is not active - attempting restart"
        systemctl start redis-server.service || deps_healthy=false
    fi
    
    # Check Ollama
    if systemctl is-active --quiet ollama.service; then
        success "Ollama service is active"
    else
        warning "Ollama service is not active - attempting restart"
        systemctl start ollama.service || deps_healthy=false
    fi
    
    # Test connectivity
    if ! curl -s http://localhost:11434/api/version >/dev/null 2>&1; then
        warning "Ollama connectivity test failed"
        deps_healthy=false
    fi
    
    if ! redis-cli ping >/dev/null 2>&1; then
        warning "Redis connectivity test failed"
        deps_healthy=false
    fi
    
    if $deps_healthy; then
        success "All dependencies are healthy"
        return 0
    else
        error "Some dependencies are unhealthy"
        return 1
    fi
}

# Function to clean up resources
cleanup_resources() {
    info "Cleaning up resources..."
    
    # Kill any zombie processes
    pkill -f "uvicorn.*citadel_llm.api.gateway" || true
    
    # Clean up PID files
    rm -f /opt/citadel/var/run/citadel-gateway.pid
    
    # Clean up temporary files
    find /tmp -name "*citadel*" -mtime +1 -delete 2>/dev/null || true
    
    # Clear any stuck sockets
    find /opt/citadel/var -name "*.sock" -delete 2>/dev/null || true
    
    success "Resource cleanup completed"
}

# Function to check disk space
check_disk_space() {
    info "Checking disk space..."
    
    local disk_usage=$(df / | awk 'NR==2 {print $(NF-1)}' | sed 's/%//')
    
    if [[ $disk_usage -gt 90 ]]; then
        warning "Disk usage is at ${disk_usage}% - performing log cleanup"
        
        # Clean old logs
        find /opt/citadel/logs -name "*.log" -mtime +7 -delete 2>/dev/null || true
        find /var/log -name "*citadel*" -mtime +7 -delete 2>/dev/null || true
        
        success "Log cleanup completed"
    else
        success "Disk space is adequate (${disk_usage}% used)"
    fi
}

# Function to check memory usage
check_memory() {
    info "Checking memory usage..."
    
    local mem_usage=$(free | awk 'NR==2{printf "%.0f", $3*100/$2}')
    
    if [[ $mem_usage -gt 90 ]]; then
        warning "Memory usage is at ${mem_usage}% - clearing caches"
        
        # Clear system caches
        sync
        echo 1 > /proc/sys/vm/drop_caches
        
        # Restart Redis to clear cache if needed
        systemctl restart redis-server.service
        
        success "Memory cleanup completed"
    else
        success "Memory usage is normal (${mem_usage}%)"
    fi
}

# Function to validate configuration
validate_configuration() {
    info "Validating configuration..."
    
    # Check if configuration files exist
    local config_files=(
        "/opt/citadel/config/environments/production.yaml"
        "/opt/citadel/src/citadel_llm/api/gateway.py"
    )
    
    for config_file in "${config_files[@]}"; do
        if [[ ! -f "$config_file" ]]; then
            error "Configuration file missing: $config_file"
            return 1
        fi
    done
    
    # Test Python import
    if ! cd /opt/citadel && PYTHONPATH=/opt/citadel/src python3 -c "import citadel_llm.api.gateway" 2>/dev/null; then
        error "Python import test failed"
        return 1
    fi
    
    success "Configuration validation passed"
    return 0
}

# Function to perform recovery
perform_recovery() {
    info "Starting recovery procedure..."
    
    # Step 1: Check and fix dependencies
    if ! check_dependencies; then
        warning "Dependency check failed - waiting for dependencies to stabilize"
        sleep 10
        check_dependencies || return 1
    fi
    
    # Step 2: Clean up resources
    cleanup_resources
    
    # Step 3: Check system resources
    check_disk_space
    check_memory
    
    # Step 4: Validate configuration
    validate_configuration || return 1
    
    # Step 5: Wait a bit before restart
    info "Waiting 10 seconds before service restart..."
    sleep 10
    
    success "Recovery procedure completed successfully"
    return 0
}

# Function to reset recovery state on successful recovery
reset_recovery_state() {
    if [[ -f "$RECOVERY_STATE_FILE" ]]; then
        echo "0" > "$RECOVERY_STATE_FILE"
        success "Recovery state reset"
    fi
}

# Main recovery logic
main() {
    log "Starting recovery analysis..."
    
    # Perform recovery procedure
    if perform_recovery; then
        success "Recovery procedure successful"
        
        # Reset recovery state
        reset_recovery_state
        
        # Try to restart the service
        info "Attempting to restart citadel-gateway service..."
        if systemctl start citadel-gateway.service; then
            success "Service restart successful"
            
            # Wait a bit and verify it's running
            sleep 5
            if systemctl is-active --quiet citadel-gateway.service; then
                success "Service is now active and healthy"
                log "=== Recovery completed successfully ==="
                exit 0
            else
                error "Service failed to stay active after restart"
                exit 1
            fi
        else
            error "Failed to restart service"
            exit 1
        fi
    else
        error "Recovery procedure failed"
        exit 1
    fi
}

# Execute main function
main "$@"
