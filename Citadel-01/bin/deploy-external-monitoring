#!/bin/bash

# Deploy Citadel external monitoring integration with Prometheus/Grafana infrastructure
# Configures HX-Server-02 to integrate with external monitoring at 192.168.10.37

set -euo pipefail

# Configuration
EXTERNAL_PROMETHEUS="192.168.10.37:9090"
EXTERNAL_GRAFANA="192.168.10.37:3000"
EXTERNAL_ALERTMANAGER="192.168.10.37:9093"
EXTERNAL_NODE_EXPORTER="192.168.10.37:9100"
HX_SERVER_IP="192.168.10.31"
CITADEL_PORT="8000"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

echo "================================================="
echo "Citadel External Monitoring Integration Deployment"
echo "================================================="
echo ""
echo "External Infrastructure:"
echo "• Prometheus: http://${EXTERNAL_PROMETHEUS}"
echo "• Grafana: http://${EXTERNAL_GRAFANA}"
echo "• Alertmanager: http://${EXTERNAL_ALERTMANAGER}"
echo "• Node Exporter: http://${EXTERNAL_NODE_EXPORTER}"
echo ""
echo "HX-Server-02: ${HX_SERVER_IP}:${CITADEL_PORT}"
echo ""

# Step 1: Test connectivity to external infrastructure
log_info "Testing connectivity to external monitoring infrastructure..."

test_endpoint() {
    local endpoint="$1"
    local name="$2"
    
    if curl -s --connect-timeout 5 "http://${endpoint}" > /dev/null 2>&1; then
        log_success "✓ ${name} (${endpoint}) is reachable"
        return 0
    else
        log_error "✗ ${name} (${endpoint}) is NOT reachable"
        return 1
    fi
}

CONNECTIVITY_OK=true

test_endpoint "$EXTERNAL_PROMETHEUS" "Prometheus" || CONNECTIVITY_OK=false
test_endpoint "$EXTERNAL_GRAFANA" "Grafana" || CONNECTIVITY_OK=false
test_endpoint "$EXTERNAL_ALERTMANAGER" "Alertmanager" || CONNECTIVITY_OK=false
test_endpoint "$EXTERNAL_NODE_EXPORTER" "Node Exporter" || CONNECTIVITY_OK=false

if [ "$CONNECTIVITY_OK" = false ]; then
    log_error "Some external services are not reachable. Please check network connectivity."
    read -p "Continue anyway? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Step 2: Backup existing configuration
log_info "Backing up existing configuration..."
BACKUP_DIR="/opt/citadel/var/backup/monitoring-$(date +%Y%m%d-%H%M%S)"
mkdir -p "$BACKUP_DIR"

if [ -f "/opt/citadel/config/environments/production.yaml" ]; then
    cp "/opt/citadel/config/environments/production.yaml" "$BACKUP_DIR/"
    log_success "Backed up production.yaml"
fi

# Step 3: Update production configuration with external monitoring
log_info "Updating production configuration with external monitoring settings..."

# The production.yaml file should already be updated, but let's verify key sections exist
if ! grep -q "external_prometheus_url" /opt/citadel/config/environments/production.yaml; then
    log_error "production.yaml missing external monitoring configuration. Please run the monitoring integration setup first."
    exit 1
fi

log_success "Production configuration includes external monitoring settings"

# Step 4: Verify Citadel metrics endpoints are working
log_info "Testing Citadel metrics endpoints..."

# Start Citadel if not running
if ! pgrep -f "uvicorn.*gateway:app" > /dev/null; then
    log_warning "Citadel Gateway not running. Starting it..."
    cd /opt/citadel
    source citadel_venv/bin/activate
    uvicorn src.citadel_llm.api.gateway:app --host 0.0.0.0 --port 8000 &
    sleep 5
fi

# Test endpoints
ENDPOINTS=(
    "/metrics"
    "/health/"
    "/webhooks/alerts/stats"
)

for endpoint in "${ENDPOINTS[@]}"; do
    if curl -s "http://localhost:${CITADEL_PORT}${endpoint}" > /dev/null; then
        log_success "✓ Endpoint ${endpoint} is responding"
    else
        log_error "✗ Endpoint ${endpoint} is NOT responding"
    fi
done

# Step 5: Deploy Prometheus scrape configuration
log_info "Deploying Prometheus scrape configuration..."

PROMETHEUS_CONFIG_DIR="/opt/citadel/config/monitoring/prometheus"
mkdir -p "$PROMETHEUS_CONFIG_DIR"

# Copy the citadel-targets.yml file we created
if [ -f "/opt/citadel/config/monitoring/prometheus/citadel-targets.yml" ]; then
    log_success "Prometheus targets configuration already exists"
else
    log_error "Prometheus targets configuration missing!"
fi

# Step 6: Test webhook integration
log_info "Testing webhook integration..."

if [ -x "/opt/citadel/bin/test-webhook-integration" ]; then
    log_info "Running webhook integration tests..."
    /opt/citadel/bin/test-webhook-integration | head -20
    log_success "Webhook integration test completed"
else
    log_error "Webhook test script not found or not executable"
fi

# Step 7: Create systemd service for metrics export (optional)
log_info "Setting up systemd service for reliable metrics export..."

METRICS_SERVICE_FILE="/etc/systemd/system/citadel-metrics-exporter.service"

if [ ! -f "$METRICS_SERVICE_FILE" ]; then
    sudo tee "$METRICS_SERVICE_FILE" > /dev/null << EOF
[Unit]
Description=Citadel Metrics Exporter for External Prometheus
After=network.target
Requires=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/opt/citadel
Environment=PATH=/opt/citadel/citadel_venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
ExecStart=/opt/citadel/citadel_venv/bin/uvicorn src.citadel_llm.api.gateway:app --host 0.0.0.0 --port 8000
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF

    sudo systemctl daemon-reload
    sudo systemctl enable citadel-metrics-exporter
    log_success "Created and enabled citadel-metrics-exporter systemd service"
else
    log_success "Systemd service already exists"
fi

# Step 8: Deploy Grafana dashboards
log_info "Preparing Grafana dashboard import..."

GRAFANA_DASHBOARDS_DIR="/opt/citadel/config/monitoring/grafana/dashboards"

if [ -d "$GRAFANA_DASHBOARDS_DIR" ]; then
    log_info "Grafana dashboards found in: $GRAFANA_DASHBOARDS_DIR"
    
    echo ""
    echo "To import Grafana dashboards to http://${EXTERNAL_GRAFANA}:"
    echo "1. Open http://${EXTERNAL_GRAFANA} in your browser"
    echo "2. Login with admin/admin"
    echo "3. Go to '+' -> Import"
    echo "4. Upload dashboard JSON files from: $GRAFANA_DASHBOARDS_DIR"
    echo ""
    
    log_info "Available dashboards:"
    find "$GRAFANA_DASHBOARDS_DIR" -name "*.json" -exec basename {} \; 2>/dev/null || echo "No dashboard files found"
else
    log_warning "Grafana dashboards directory not found"
fi

# Step 9: Configure Prometheus to scrape Citadel
log_info "Prometheus scrape configuration instructions..."

echo ""
echo "Add the following to your Prometheus configuration at ${EXTERNAL_PROMETHEUS}:"
echo ""
echo "# Add to /etc/prometheus/prometheus.yml"
echo "scrape_configs:"
echo "  - job_name: 'citadel-hx-server-02'"
echo "    static_configs:"
echo "      - targets: ['${HX_SERVER_IP}:${CITADEL_PORT}']"
echo "        labels:"
echo "          cluster: 'hx-server-02'"
echo "          environment: 'production'"
echo "    metrics_path: '/metrics'"
echo "    scrape_interval: 30s"
echo ""
echo "  - job_name: 'citadel-health-hx-server-02'"
echo "    static_configs:"
echo "      - targets: ['${HX_SERVER_IP}:${CITADEL_PORT}']"
echo "        labels:"
echo "          cluster: 'hx-server-02'"
echo "          environment: 'production'"
echo "    metrics_path: '/health/'"
echo "    scrape_interval: 15s"
echo ""

# Step 10: Configure Alertmanager webhook
log_info "Alertmanager webhook configuration instructions..."

echo ""
echo "Add the following to your Alertmanager configuration at ${EXTERNAL_ALERTMANAGER}:"
echo ""
echo "# Add to /etc/alertmanager/alertmanager.yml"
echo "receivers:"
echo "  - name: 'citadel-hx-server-02-webhook'"
echo "    webhook_configs:"
echo "      - url: 'http://${HX_SERVER_IP}:${CITADEL_PORT}/webhooks/alerts'"
echo "        send_resolved: true"
echo ""
echo "route:"
echo "  routes:"
echo "    - match:"
echo "        cluster: hx-server-02"
echo "      receiver: 'citadel-hx-server-02-webhook'"
echo "      group_wait: 10s"
echo "      repeat_interval: 5m"
echo ""

# Step 11: Final verification
log_info "Running final verification..."

VERIFICATION_PASSED=true

# Check if Citadel is responding
if curl -s "http://localhost:${CITADEL_PORT}/health/" > /dev/null; then
    log_success "✓ Citadel health endpoint responding"
else
    log_error "✗ Citadel health endpoint not responding"
    VERIFICATION_PASSED=false
fi

# Check if metrics endpoint is responding
if curl -s "http://localhost:${CITADEL_PORT}/metrics" | grep -q "citadel_"; then
    log_success "✓ Citadel metrics endpoint responding with metrics"
else
    log_error "✗ Citadel metrics endpoint not responding properly"
    VERIFICATION_PASSED=false
fi

# Check if webhook endpoint is responding
if curl -s "http://localhost:${CITADEL_PORT}/webhooks/alerts/stats" > /dev/null; then
    log_success "✓ Citadel webhook endpoint responding"
else
    log_error "✗ Citadel webhook endpoint not responding"
    VERIFICATION_PASSED=false
fi

echo ""
echo "================================================="
if [ "$VERIFICATION_PASSED" = true ]; then
    log_success "External Monitoring Integration Deployment COMPLETED SUCCESSFULLY"
    echo ""
    echo "Next Steps:"
    echo "1. Configure external Prometheus to scrape HX-Server-02 (see instructions above)"
    echo "2. Configure external Alertmanager webhook (see instructions above)" 
    echo "3. Import Grafana dashboards to external Grafana"
    echo "4. Test end-to-end alert flow"
    echo ""
    echo "Monitoring Endpoints:"
    echo "• Metrics: http://${HX_SERVER_IP}:${CITADEL_PORT}/metrics"
    echo "• Health: http://${HX_SERVER_IP}:${CITADEL_PORT}/health/"
    echo "• Webhooks: http://${HX_SERVER_IP}:${CITADEL_PORT}/webhooks/alerts"
    echo "• Active Alerts: http://${HX_SERVER_IP}:${CITADEL_PORT}/webhooks/alerts/active"
    echo ""
else
    log_error "External Monitoring Integration Deployment FAILED"
    echo ""
    echo "Please check the errors above and retry deployment."
    echo "Configuration backup available at: $BACKUP_DIR"
    exit 1
fi

echo "Configuration backup available at: $BACKUP_DIR"
echo "================================================="
