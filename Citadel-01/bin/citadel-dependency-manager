#!/bin/bash

# Citadel Service Dependency Manager
# Handles systemd service dependencies and startup ordering for HX-Server-02

set -euo pipefail

# Configuration
CITADEL_HOME="/opt/citadel"
SERVICE_CONFIG_DIR="$CITADEL_HOME/config/services"
LOG_DIR="$CITADEL_HOME/logs"
SYSTEMD_DIR="/etc/systemd/system"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Service dependency map
declare -A SERVICE_DEPS=(
    ["network-online.target"]=""
    ["redis-server.service"]="network-online.target"
    ["ollama.service"]="network-online.target"
    ["citadel-gateway.service"]="network-online.target redis-server.service ollama.service"
)

# Service priority order (lower numbers start first)
declare -A SERVICE_PRIORITY=(
    ["network-online.target"]=1
    ["redis-server.service"]=2
    ["ollama.service"]=2
    ["citadel-gateway.service"]=3
)

# Function to check service status
check_service_status() {
    local service=$1
    if systemctl is-active --quiet "$service"; then
        echo "active"
    elif systemctl is-enabled --quiet "$service" 2>/dev/null; then
        echo "enabled"
    elif systemctl list-unit-files | grep -q "^$service"; then
        echo "exists"
    else
        echo "missing"
    fi
}

# Function to validate service dependencies
validate_dependencies() {
    log "Validating service dependencies..."
    
    local all_valid=true
    
    for service in "${!SERVICE_DEPS[@]}"; do
        if [[ "$service" == "network-online.target" ]]; then
            continue  # Skip network target validation
        fi
        
        local status=$(check_service_status "$service")
        log "Service $service: $status"
        
        if [[ "$status" == "missing" ]]; then
            error "Service $service is missing"
            all_valid=false
        fi
        
        # Check dependencies exist
        local deps="${SERVICE_DEPS[$service]}"
        if [[ -n "$deps" ]]; then
            for dep in $deps; do
                local dep_status=$(check_service_status "$dep")
                if [[ "$dep_status" == "missing" ]]; then
                    error "Dependency $dep for $service is missing"
                    all_valid=false
                fi
            done
        fi
    done
    
    if $all_valid; then
        success "All service dependencies validated"
        return 0
    else
        error "Service dependency validation failed"
        return 1
    fi
}

# Function to deploy enhanced service configuration
deploy_service_config() {
    log "Deploying enhanced Citadel Gateway service configuration..."
    
    # Backup existing service file
    if [[ -f "$SYSTEMD_DIR/ollama-gateway.service" ]]; then
        log "Backing up existing ollama-gateway.service"
        sudo cp "$SYSTEMD_DIR/ollama-gateway.service" "$SYSTEMD_DIR/ollama-gateway.service.backup.$(date +%Y%m%d_%H%M%S)"
    fi
    
    # Copy new service configuration
    if [[ -f "$SERVICE_CONFIG_DIR/citadel-gateway.service" ]]; then
        log "Installing new citadel-gateway.service configuration"
        sudo cp "$SERVICE_CONFIG_DIR/citadel-gateway.service" "$SYSTEMD_DIR/"
        
        # Remove old service if it exists
        if [[ -f "$SYSTEMD_DIR/ollama-gateway.service" ]]; then
            log "Removing old ollama-gateway.service"
            sudo systemctl stop ollama-gateway.service 2>/dev/null || true
            sudo systemctl disable ollama-gateway.service 2>/dev/null || true
            sudo rm "$SYSTEMD_DIR/ollama-gateway.service"
        fi
        
        # Reload systemd and enable new service
        sudo systemctl daemon-reload
        sudo systemctl enable citadel-gateway.service
        
        success "Service configuration deployed successfully"
    else
        error "Service configuration file not found: $SERVICE_CONFIG_DIR/citadel-gateway.service"
        return 1
    fi
}

# Function to create log directories
create_log_directories() {
    log "Creating log directories..."
    
    local dirs=(
        "$LOG_DIR/api-gateway"
        "$CITADEL_HOME/var/run"
        "$CITADEL_HOME/var/state"
    )
    
    for dir in "${dirs[@]}"; do
        if [[ ! -d "$dir" ]]; then
            sudo mkdir -p "$dir"
            sudo chown agent0:citadel "$dir"
            sudo chmod 755 "$dir"
            log "Created directory: $dir"
        fi
    done
    
    success "Log directories created"
}

# Function to test service dependencies
test_service_dependencies() {
    log "Testing service dependency chain..."
    
    # Test network connectivity
    if ping -c 1 -W 5 8.8.8.8 >/dev/null 2>&1; then
        success "Network connectivity verified"
    else
        warning "Network connectivity test failed"
    fi
    
    # Test Redis connectivity
    if command -v redis-cli >/dev/null && redis-cli ping >/dev/null 2>&1; then
        success "Redis connectivity verified"
    else
        warning "Redis connectivity test failed"
    fi
    
    # Test Ollama connectivity
    if curl -s http://localhost:11434/api/version >/dev/null 2>&1; then
        success "Ollama connectivity verified"
    else
        warning "Ollama connectivity test failed"
    fi
    
    # Test PostgreSQL connectivity (remote)
    if command -v pg_isready >/dev/null; then
        if pg_isready -h 192.168.10.35 -p 5432 >/dev/null 2>&1; then
            success "PostgreSQL connectivity verified"
        else
            warning "PostgreSQL connectivity test failed"
        fi
    else
        warning "pg_isready not available, skipping PostgreSQL test"
    fi
}

# Function to show service status with dependencies
show_service_status() {
    log "Current service status and dependencies:"
    echo ""
    
    # Sort services by priority
    local sorted_services=()
    while IFS= read -r line; do
        sorted_services+=("$line")
    done < <(printf '%s\n' "${!SERVICE_PRIORITY[@]}" | sort -k1,1n -t' ' <(
        for service in "${!SERVICE_PRIORITY[@]}"; do
            echo "${SERVICE_PRIORITY[$service]} $service"
        done
    ) | cut -d' ' -f2-)
    
    for service in "${sorted_services[@]}"; do
        if [[ "$service" == "network-online.target" ]]; then
            continue
        fi
        
        local status=$(check_service_status "$service")
        local status_color=""
        
        case "$status" in
            "active") status_color="$GREEN" ;;
            "enabled") status_color="$YELLOW" ;;
            "exists") status_color="$BLUE" ;;
            "missing") status_color="$RED" ;;
        esac
        
        echo -e "  ${status_color}●${NC} $service: $status"
        
        # Show dependencies
        local deps="${SERVICE_DEPS[$service]}"
        if [[ -n "$deps" ]]; then
            echo "    Dependencies: $deps"
        fi
    done
    
    echo ""
}

# Function to start services in dependency order
start_services_ordered() {
    log "Starting services in dependency order..."
    
    local services_to_start=(
        "redis-server.service"
        "ollama.service"
        "citadel-gateway.service"
    )
    
    for service in "${services_to_start[@]}"; do
        log "Starting $service..."
        
        if sudo systemctl start "$service"; then
            success "$service started successfully"
            
            # Wait for service to be fully active
            local timeout=30
            local count=0
            while [[ $count -lt $timeout ]]; do
                if systemctl is-active --quiet "$service"; then
                    break
                fi
                sleep 1
                ((count++))
            done
            
            if [[ $count -ge $timeout ]]; then
                warning "$service took longer than expected to start"
            fi
        else
            error "Failed to start $service"
            return 1
        fi
    done
    
    success "All services started in dependency order"
}

# Function to stop services in reverse dependency order
stop_services_ordered() {
    log "Stopping services in reverse dependency order..."
    
    local services_to_stop=(
        "citadel-gateway.service"
        "ollama.service"
        "redis-server.service"
    )
    
    for service in "${services_to_stop[@]}"; do
        if systemctl is-active --quiet "$service"; then
            log "Stopping $service..."
            
            if sudo systemctl stop "$service"; then
                success "$service stopped successfully"
            else
                warning "Failed to stop $service gracefully"
            fi
        else
            log "$service is not running"
        fi
    done
    
    success "All services stopped"
}

# Function to restart services with proper ordering
restart_services_ordered() {
    log "Restarting services with proper dependency ordering..."
    stop_services_ordered
    sleep 3
    start_services_ordered
}

# Main function
main() {
    local action="${1:-status}"
    
    echo "=================================================================="
    echo "         Citadel Service Dependency Manager"
    echo "=================================================================="
    echo ""
    
    case "$action" in
        "validate")
            validate_dependencies
            ;;
        "deploy")
            create_log_directories
            deploy_service_config
            validate_dependencies
            ;;
        "test")
            test_service_dependencies
            ;;
        "status")
            show_service_status
            ;;
        "start")
            validate_dependencies
            start_services_ordered
            ;;
        "stop")
            stop_services_ordered
            ;;
        "restart")
            restart_services_ordered
            ;;
        "full-deploy")
            create_log_directories
            deploy_service_config
            validate_dependencies
            test_service_dependencies
            restart_services_ordered
            show_service_status
            ;;
        *)
            echo "Usage: $0 {validate|deploy|test|status|start|stop|restart|full-deploy}"
            echo ""
            echo "Actions:"
            echo "  validate     - Validate service dependencies"
            echo "  deploy       - Deploy enhanced service configuration"
            echo "  test         - Test service connectivity"
            echo "  status       - Show current service status"
            echo "  start        - Start services in dependency order"
            echo "  stop         - Stop services in reverse dependency order"
            echo "  restart      - Restart all services with proper ordering"
            echo "  full-deploy  - Complete deployment and validation"
            exit 1
            ;;
    esac
}

# Check if running as root for systemd operations
if [[ "$EUID" -eq 0 ]] && [[ "${1:-}" != "test" ]] && [[ "${1:-}" != "status" ]] && [[ "${1:-}" != "validate" ]]; then
    error "This script should not be run as root. Use sudo for individual commands."
    exit 1
fi

main "$@"
