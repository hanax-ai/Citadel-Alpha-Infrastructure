#!/bin/bash
# Citadel Service Management Script
# Comprehensive service control for all Citadel components

set -euo pipefail

# Configuration
CITADEL_HOME="/opt/citadel"
SERVICES=(
    "postgresql"
    "redis-server"
    "ollama"
    "nginx"
    "citadel-gateway"
)

# Service dependencies (service:depends_on)
declare -A SERVICE_DEPS=(
    ["postgresql"]=""
    ["redis-server"]=""
    ["ollama"]=""
    ["nginx"]="postgresql redis-server ollama"
    ["citadel-gateway"]="postgresql redis-server ollama"
)

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Logging
LOG_FILE="/opt/citadel/logs/monitoring/service-management.log"
mkdir -p "$(dirname "$LOG_FILE")"

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

print_header() {
    echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${CYAN}‚ïë                   Citadel Service Manager                ‚ïë${NC}"
    echo -e "${CYAN}‚ïë                  Production Operations                   ‚ïë${NC}"
    echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo
}

show_usage() {
    echo -e "${BLUE}Usage: $0 {start|stop|restart|status|health|logs|enable|disable} [service_name]${NC}"
    echo
    echo -e "${YELLOW}Commands:${NC}"
    echo "  start    - Start all services or specific service"
    echo "  stop     - Stop all services or specific service"
    echo "  restart  - Restart all services or specific service"
    echo "  status   - Show status of all services or specific service"
    echo "  health   - Run comprehensive health checks"
    echo "  logs     - Show logs for all services or specific service"
    echo "  enable   - Enable service for auto-start"
    echo "  disable  - Disable service auto-start"
    echo
    echo -e "${YELLOW}Services:${NC}"
    for service in "${SERVICES[@]}"; do
        echo "  - $service"
    done
    echo
    echo -e "${YELLOW}Examples:${NC}"
    echo "  $0 start                    # Start all services"
    echo "  $0 stop citadel-gateway     # Stop specific service"
    echo "  $0 status                   # Show all service status"
    echo "  $0 health                   # Run health checks"
}

check_service_exists() {
    local service="$1"
    if ! systemctl list-unit-files "$service.service" &>/dev/null; then
        echo -e "${RED}‚ùå Service '$service' not found${NC}"
        return 1
    fi
    return 0
}

get_service_status() {
    local service="$1"
    if systemctl is-active --quiet "$service"; then
        echo -e "${GREEN}‚úÖ RUNNING${NC}"
    elif systemctl is-failed --quiet "$service"; then
        echo -e "${RED}‚ùå FAILED${NC}"
    else
        echo -e "${YELLOW}‚è∏Ô∏è  STOPPED${NC}"
    fi
}

get_service_enabled() {
    local service="$1"
    if systemctl is-enabled --quiet "$service" 2>/dev/null; then
        echo -e "${GREEN}enabled${NC}"
    else
        echo -e "${YELLOW}disabled${NC}"
    fi
}

wait_for_service() {
    local service="$1"
    local timeout="${2:-30}"
    local count=0
    
    echo -e "${BLUE}‚è≥ Waiting for $service to start...${NC}"
    
    while [ $count -lt $timeout ]; do
        if systemctl is-active --quiet "$service"; then
            echo -e "${GREEN}‚úÖ $service is running${NC}"
            return 0
        fi
        sleep 1
        ((count++))
    done
    
    echo -e "${RED}‚ùå $service failed to start within $timeout seconds${NC}"
    return 1
}

start_service() {
    local service="$1"
    
    if ! check_service_exists "$service"; then
        return 1
    fi
    
    # Check dependencies
    local deps="${SERVICE_DEPS[$service]:-}"
    if [[ -n "$deps" ]]; then
        echo -e "${BLUE}üîó Checking dependencies for $service: $deps${NC}"
        for dep in $deps; do
            if ! systemctl is-active --quiet "$dep"; then
                echo -e "${YELLOW}‚ö†Ô∏è  Starting dependency: $dep${NC}"
                start_service "$dep"
            fi
        done
    fi
    
    echo -e "${BLUE}üöÄ Starting $service...${NC}"
    log "Starting service: $service"
    
    if systemctl is-active --quiet "$service"; then
        echo -e "${GREEN}‚úÖ $service is already running${NC}"
        return 0
    fi
    
    if sudo systemctl start "$service"; then
        wait_for_service "$service"
        log "Successfully started service: $service"
    else
        echo -e "${RED}‚ùå Failed to start $service${NC}"
        log "Failed to start service: $service"
        return 1
    fi
}

stop_service() {
    local service="$1"
    
    if ! check_service_exists "$service"; then
        return 1
    fi
    
    echo -e "${BLUE}‚èπÔ∏è  Stopping $service...${NC}"
    log "Stopping service: $service"
    
    if ! systemctl is-active --quiet "$service"; then
        echo -e "${YELLOW}‚ö†Ô∏è  $service is already stopped${NC}"
        return 0
    fi
    
    if sudo systemctl stop "$service"; then
        echo -e "${GREEN}‚úÖ Successfully stopped $service${NC}"
        log "Successfully stopped service: $service"
    else
        echo -e "${RED}‚ùå Failed to stop $service${NC}"
        log "Failed to stop service: $service"
        return 1
    fi
}

restart_service() {
    local service="$1"
    
    echo -e "${BLUE}üîÑ Restarting $service...${NC}"
    log "Restarting service: $service"
    
    stop_service "$service"
    sleep 2
    start_service "$service"
}

show_status() {
    local service="${1:-}"
    
    if [[ -n "$service" ]]; then
        if ! check_service_exists "$service"; then
            return 1
        fi
        
        echo -e "${BLUE}üìä Status for $service:${NC}"
        echo -e "  Status: $(get_service_status "$service")"
        echo -e "  Enabled: $(get_service_enabled "$service")"
        echo -e "  PID: $(systemctl show -p MainPID --value "$service" 2>/dev/null || echo 'N/A')"
        echo
        sudo systemctl status "$service" --no-pager -l
    else
        echo -e "${BLUE}üìä Service Status Overview:${NC}"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        printf "%-20s %-15s %-10s %-10s\n" "SERVICE" "STATUS" "ENABLED" "PID"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        for svc in "${SERVICES[@]}"; do
            if check_service_exists "$svc" 2>/dev/null; then
                status=$(get_service_status "$svc")
                enabled=$(get_service_enabled "$svc")
                pid=$(systemctl show -p MainPID --value "$svc" 2>/dev/null || echo 'N/A')
                printf "%-20s %-25s %-20s %-10s\n" "$svc" "$status" "$enabled" "$pid"
            else
                printf "%-20s %-25s %-20s %-10s\n" "$svc" "${RED}NOT FOUND${NC}" "N/A" "N/A"
            fi
        done
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    fi
}

run_health_checks() {
    echo -e "${BLUE}üè• Running Comprehensive Health Checks...${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    # Service health
    echo -e "${CYAN}üîß Service Health:${NC}"
    all_healthy=true
    
    for service in "${SERVICES[@]}"; do
        if check_service_exists "$service" 2>/dev/null; then
            if systemctl is-active --quiet "$service"; then
                echo -e "  ‚úÖ $service: Running"
            else
                echo -e "  ‚ùå $service: Not running"
                all_healthy=false
            fi
        else
            echo -e "  ‚ö†Ô∏è  $service: Not installed"
            all_healthy=false
        fi
    done
    
    echo
    
    # API health checks
    echo -e "${CYAN}üåê API Health:${NC}"
    if command -v curl >/dev/null 2>&1; then
        # Test health endpoints
        endpoints=(
            "http://localhost:8002/health/"
            "http://localhost:8002/health/quick"
            "http://localhost:8002/management/system/ollama-status"
        )
        
        for endpoint in "${endpoints[@]}"; do
            if curl -s --max-time 10 "$endpoint" >/dev/null 2>&1; then
                echo -e "  ‚úÖ $endpoint: OK"
            else
                echo -e "  ‚ùå $endpoint: Failed"
                all_healthy=false
            fi
        done
    else
        echo -e "  ‚ö†Ô∏è  curl not available for API testing"
    fi
    
    echo
    
    # Database connectivity
    echo -e "${CYAN}üóÑÔ∏è  Database Health:${NC}"
    if command -v psql >/dev/null 2>&1; then
        if PGPASSWORD="CitadelLLM#2025\$SecurePass!" psql -h 192.168.10.35 -U citadel_llm_user -d citadel_llm_db -c "SELECT 1;" >/dev/null 2>&1; then
            echo -e "  ‚úÖ PostgreSQL: Connected"
        else
            echo -e "  ‚ùå PostgreSQL: Connection failed"
            all_healthy=false
        fi
    else
        echo -e "  ‚ö†Ô∏è  psql not available for database testing"
    fi
    
    # Redis connectivity
    if command -v redis-cli >/dev/null 2>&1; then
        if redis-cli ping >/dev/null 2>&1; then
            echo -e "  ‚úÖ Redis: Connected"
        else
            echo -e "  ‚ùå Redis: Connection failed"
            all_healthy=false
        fi
    else
        echo -e "  ‚ö†Ô∏è  redis-cli not available for Redis testing"
    fi
    
    echo
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    if $all_healthy; then
        echo -e "${GREEN}üéâ All systems healthy!${NC}"
        log "Health check passed - all systems healthy"
        return 0
    else
        echo -e "${RED}‚ö†Ô∏è  Some systems are unhealthy${NC}"
        log "Health check failed - some systems unhealthy"
        return 1
    fi
}

show_logs() {
    local service="${1:-}"
    local lines="${2:-50}"
    
    if [[ -n "$service" ]]; then
        if ! check_service_exists "$service"; then
            return 1
        fi
        
        echo -e "${BLUE}üìú Logs for $service (last $lines lines):${NC}"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        sudo journalctl -u "$service" -n "$lines" --no-pager
    else
        echo -e "${BLUE}üìú System Logs Overview:${NC}"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        # Show recent logs for all services
        for svc in "${SERVICES[@]}"; do
            if check_service_exists "$svc" 2>/dev/null; then
                echo -e "${CYAN}$svc:${NC}"
                sudo journalctl -u "$svc" -n 5 --no-pager --since "1 hour ago" | tail -5
                echo
            fi
        done
        
        # Show Citadel application logs
        echo -e "${CYAN}Application Logs:${NC}"
        if [[ -f "/opt/citadel/logs/gateway/gateway.log" ]]; then
            echo "Gateway logs (last 10 lines):"
            tail -10 /opt/citadel/logs/gateway/gateway.log
        fi
        
        if [[ -f "/opt/citadel/logs/monitoring/health-check.log" ]]; then
            echo "Health check logs (last 5 lines):"
            tail -5 /opt/citadel/logs/monitoring/health-check.log
        fi
    fi
}

enable_service() {
    local service="$1"
    
    if ! check_service_exists "$service"; then
        return 1
    fi
    
    echo -e "${BLUE}‚ö° Enabling $service for auto-start...${NC}"
    log "Enabling service for auto-start: $service"
    
    if sudo systemctl enable "$service"; then
        echo -e "${GREEN}‚úÖ $service enabled for auto-start${NC}"
        log "Successfully enabled service: $service"
    else
        echo -e "${RED}‚ùå Failed to enable $service${NC}"
        log "Failed to enable service: $service"
        return 1
    fi
}

disable_service() {
    local service="$1"
    
    if ! check_service_exists "$service"; then
        return 1
    fi
    
    echo -e "${BLUE}‚è∏Ô∏è  Disabling $service auto-start...${NC}"
    log "Disabling service auto-start: $service"
    
    if sudo systemctl disable "$service"; then
        echo -e "${GREEN}‚úÖ $service disabled from auto-start${NC}"
        log "Successfully disabled service: $service"
    else
        echo -e "${RED}‚ùå Failed to disable $service${NC}"
        log "Failed to disable service: $service"
        return 1
    fi
}

# Main command processing
main() {
    local command="${1:-}"
    local service="${2:-}"
    
    print_header
    
    case "$command" in
        "start")
            if [[ -n "$service" ]]; then
                start_service "$service"
            else
                echo -e "${BLUE}üöÄ Starting all Citadel services...${NC}"
                for svc in "${SERVICES[@]}"; do
                    start_service "$svc"
                    sleep 2
                done
                echo -e "${GREEN}‚úÖ All services started${NC}"
            fi
            ;;
        "stop")
            if [[ -n "$service" ]]; then
                stop_service "$service"
            else
                echo -e "${BLUE}‚èπÔ∏è  Stopping all Citadel services...${NC}"
                # Stop in reverse order
                for ((i=${#SERVICES[@]}-1; i>=0; i--)); do
                    stop_service "${SERVICES[i]}"
                    sleep 1
                done
                echo -e "${GREEN}‚úÖ All services stopped${NC}"
            fi
            ;;
        "restart")
            if [[ -n "$service" ]]; then
                restart_service "$service"
            else
                echo -e "${BLUE}üîÑ Restarting all Citadel services...${NC}"
                # Stop all first
                for ((i=${#SERVICES[@]}-1; i>=0; i--)); do
                    stop_service "${SERVICES[i]}"
                done
                sleep 3
                # Start all
                for svc in "${SERVICES[@]}"; do
                    start_service "$svc"
                    sleep 2
                done
                echo -e "${GREEN}‚úÖ All services restarted${NC}"
            fi
            ;;
        "status")
            show_status "$service"
            ;;
        "health")
            run_health_checks
            ;;
        "logs")
            show_logs "$service"
            ;;
        "enable")
            if [[ -n "$service" ]]; then
                enable_service "$service"
            else
                echo -e "${BLUE}‚ö° Enabling all Citadel services...${NC}"
                for svc in "${SERVICES[@]}"; do
                    enable_service "$svc"
                done
                echo -e "${GREEN}‚úÖ All services enabled${NC}"
            fi
            ;;
        "disable")
            if [[ -n "$service" ]]; then
                disable_service "$service"
            else
                echo -e "${BLUE}‚è∏Ô∏è  Disabling all Citadel services...${NC}"
                for svc in "${SERVICES[@]}"; do
                    disable_service "$svc"
                done
                echo -e "${GREEN}‚úÖ All services disabled${NC}"
            fi
            ;;
        *)
            show_usage
            exit 1
            ;;
    esac
}

# Trap for cleanup
trap 'echo -e "\n${YELLOW}Operation interrupted${NC}"; exit 1' INT TERM

# Check if running as root for some operations
if [[ $EUID -ne 0 ]] && [[ "${1:-}" =~ ^(start|stop|restart|enable|disable)$ ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Some operations require sudo privileges${NC}"
fi

# Run main function
main "$@"
