#!/bin/bash
# Citadel Status Dashboard - HX-Server-02
# Comprehensive system status display

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m'

print_header() {
    echo -e "${BOLD}${BLUE}============================================${NC}"
    echo -e "${BOLD}${BLUE}    CITADEL LLM SYSTEM STATUS - HX-02     ${NC}"
    echo -e "${BOLD}${BLUE}============================================${NC}"
    echo -e "${BLUE}Timestamp: $(date)${NC}"
    echo ""
}

check_service_status() {
    echo -e "${BOLD}SERVICE STATUS:${NC}"
    
    # Citadel Gateway
    if systemctl is-active citadel-gateway >/dev/null; then
        local pid=$(systemctl show citadel-gateway --property MainPID --value)
        local uptime=$(systemctl show citadel-gateway --property ActiveEnterTimestamp --value)
        echo -e "  Citadel Gateway: ${GREEN}RUNNING${NC} (PID: $pid)"
        echo -e "  Started: $uptime"
    else
        echo -e "  Citadel Gateway: ${RED}STOPPED${NC}"
    fi
    
    # Related services
    for service in ollama redis-server postgresql; do
        if systemctl is-active $service >/dev/null 2>&1; then
            echo -e "  $service: ${GREEN}RUNNING${NC}"
        else
            echo -e "  $service: ${YELLOW}NOT RUNNING${NC}"
        fi
    done
    echo ""
}

check_api_endpoints() {
    echo -e "${BOLD}API ENDPOINTS:${NC}"
    
    endpoints=(
        "http://localhost:8001/health:Health Check"
        "http://localhost:8001/health/db:Database Health"
        "http://localhost:8001/health/external:External Services"
        "http://localhost:8001/metrics:Metrics"
    )
    
    for endpoint_info in "${endpoints[@]}"; do
        IFS=':' read -r url description <<< "$endpoint_info"
        if curl -sf "$url" >/dev/null 2>&1; then
            echo -e "  $description: ${GREEN}OK${NC}"
        else
            echo -e "  $description: ${RED}FAILED${NC}"
        fi
    done
    echo ""
}

check_system_resources() {
    echo -e "${BOLD}SYSTEM RESOURCES:${NC}"
    
    # CPU Usage
    local cpu_usage=$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1}')
    echo -e "  CPU Usage: ${cpu_usage}%"
    
    # Memory Usage
    local mem_info=$(free -h | grep Mem)
    local mem_used=$(echo $mem_info | awk '{print $3}')
    local mem_total=$(echo $mem_info | awk '{print $2}')
    echo -e "  Memory: $mem_used / $mem_total"
    
    # Disk Usage
    local disk_info=$(df -h /opt/citadel-02 | tail -1)
    local disk_used=$(echo $disk_info | awk '{print $3}')
    local disk_total=$(echo $disk_info | awk '{print $2}')
    local disk_percent=$(echo $disk_info | awk '{print $5}')
    echo -e "  Disk: $disk_used / $disk_total ($disk_percent)"
    
    # Load Average
    local load_avg=$(uptime | awk -F'load average:' '{print $2}')
    echo -e "  Load Average:$load_avg"
    echo ""
}

check_network_connectivity() {
    echo -e "${BOLD}NETWORK CONNECTIVITY:${NC}"
    
    # Local services
    if nc -z localhost 8001 2>/dev/null; then
        echo -e "  Gateway (8001): ${GREEN}LISTENING${NC}"
    else
        echo -e "  Gateway (8001): ${RED}NOT LISTENING${NC}"
    fi
    
    if nc -z localhost 11434 2>/dev/null; then
        echo -e "  Ollama (11434): ${GREEN}LISTENING${NC}"
    else
        echo -e "  Ollama (11434): ${YELLOW}NOT LISTENING${NC}"
    fi
    
    # External services
    if nc -z 192.168.10.35 5432 2>/dev/null; then
        echo -e "  PostgreSQL (192.168.10.35:5432): ${GREEN}REACHABLE${NC}"
    else
        echo -e "  PostgreSQL (192.168.10.35:5432): ${RED}UNREACHABLE${NC}"
    fi
    
    if nc -z 192.168.10.37 9090 2>/dev/null; then
        echo -e "  Prometheus (192.168.10.37:9090): ${GREEN}REACHABLE${NC}"
    else
        echo -e "  Prometheus (192.168.10.37:9090): ${YELLOW}UNREACHABLE${NC}"
    fi
    echo ""
}

check_recent_logs() {
    echo -e "${BOLD}RECENT ACTIVITY:${NC}"
    
    if [[ -f "/var/log/citadel/api-gateway/service.log" ]]; then
        echo -e "  Recent Gateway Logs:"
        tail -3 /var/log/citadel/api-gateway/service.log | sed 's/^/    /'
    else
        echo -e "  ${YELLOW}No recent gateway logs found${NC}"
    fi
    echo ""
}

print_footer() {
    echo -e "${BOLD}${BLUE}============================================${NC}"
    echo -e "${BLUE}Use 'citadel-health-monitor check' for detailed health check${NC}"
    echo -e "${BLUE}Use 'journalctl -u citadel-gateway -f' for live logs${NC}"
    echo -e "${BOLD}${BLUE}============================================${NC}"
}

# Main execution
print_header
check_service_status
check_api_endpoints
check_system_resources
check_network_connectivity
check_recent_logs
print_footer
