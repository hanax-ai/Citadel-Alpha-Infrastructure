#!/bin/bash
# Citadel Health Monitor - HX-Server-02
# Comprehensive health monitoring and alerting

set -euo pipefail

CITADEL_HOME="/opt/citadel-02"
HEALTH_LOG="/var/log/citadel/monitoring/health.log"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}[INFO]${NC} $1" | tee -a "$HEALTH_LOG"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1" | tee -a "$HEALTH_LOG"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1" | tee -a "$HEALTH_LOG"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1" | tee -a "$HEALTH_LOG"; }

# Ensure log directory exists
mkdir -p "$(dirname "$HEALTH_LOG")"

check_service_health() {
    log_info "=== CITADEL HEALTH CHECK - $(date) ==="
    
    local overall_health=0
    
    # Check main service
    if systemctl is-active citadel-gateway >/dev/null; then
        log_success "Citadel Gateway: RUNNING"
    else
        log_error "Citadel Gateway: STOPPED"
        ((overall_health++))
    fi
    
    # Check API endpoints
    if curl -sf http://localhost:8001/health >/dev/null; then
        log_success "API Health Endpoint: OK"
    else
        log_error "API Health Endpoint: FAILED"
        ((overall_health++))
    fi
    
    # Check database connectivity
    if curl -sf http://localhost:8001/health/db >/dev/null; then
        log_success "Database Connectivity: OK"
    else
        log_warn "Database Connectivity: ISSUES"
        ((overall_health++))
    fi
    
    # Check external services
    if curl -sf http://localhost:8001/health/external >/dev/null; then
        log_success "External Services: OK"
    else
        log_warn "External Services: ISSUES"
    fi
    
    # Check metrics endpoint
    if curl -sf http://localhost:8001/metrics >/dev/null; then
        log_success "Metrics Endpoint: OK"
    else
        log_warn "Metrics Endpoint: ISSUES"
    fi
    
    # Check disk space
    local disk_usage=$(df /opt/citadel-02 | tail -1 | awk '{print $5}' | sed 's/%//')
    if [[ $disk_usage -lt 80 ]]; then
        log_success "Disk Usage: ${disk_usage}% (OK)"
    elif [[ $disk_usage -lt 90 ]]; then
        log_warn "Disk Usage: ${disk_usage}% (WARNING)"
    else
        log_error "Disk Usage: ${disk_usage}% (CRITICAL)"
        ((overall_health++))
    fi
    
    # Check memory usage
    local mem_usage=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
    if [[ $mem_usage -lt 80 ]]; then
        log_success "Memory Usage: ${mem_usage}% (OK)"
    elif [[ $mem_usage -lt 90 ]]; then
        log_warn "Memory Usage: ${mem_usage}% (WARNING)"
    else
        log_error "Memory Usage: ${mem_usage}% (CRITICAL)"
        ((overall_health++))
    fi
    
    # Overall health assessment
    if [[ $overall_health -eq 0 ]]; then
        log_success "OVERALL HEALTH: EXCELLENT"
        return 0
    elif [[ $overall_health -le 2 ]]; then
        log_warn "OVERALL HEALTH: DEGRADED ($overall_health issues)"
        return 1
    else
        log_error "OVERALL HEALTH: CRITICAL ($overall_health issues)"
        return 2
    fi
}

# Continuous monitoring mode
monitor_continuous() {
    log_info "Starting continuous health monitoring..."
    while true; do
        check_service_health
        echo ""
        sleep 300  # Check every 5 minutes
    done
}

case "${1:-check}" in
    check)
        check_service_health
        ;;
    monitor)
        monitor_continuous
        ;;
    *)
        echo "Usage: $0 {check|monitor}"
        echo "  check   - Perform single health check"
        echo "  monitor - Start continuous monitoring"
        exit 1
        ;;
esac
